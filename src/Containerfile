FROM docker.io/library/ubuntu:24.04
LABEL maintainer="Sean Bentley <sfb103@gmail.com>"

USER root

# Install all the build dependencies we'll retrieve via apt-get
ENV LLVM_VERSION="16"
ENV LD_LIBRARY_PATH="/usr/local/lib"
ENV CC="clang"
ENV CXX="clang++"
ENV AR="llvm-ar"
ENV RANLIB="llvm-ranlib"
ENV NODE_MAJOR="23"
ENV NPM_VERSION="11.0.0"
RUN echo && echo 'Update apt cache' && \
    apt-get update && apt-get upgrade -y && \
    \
    echo && echo "Installing dev tools" && \
    apt-get install -y git git-lfs vim vim-tiny net-tools iputils-ping dnsutils bash-completion nano tree curl \
                       unzip apt-transport-https ca-certificates gnupg libtool autoconf automake pkg-config gcc \
                       cmake ninja-build autogen libgtest-dev libboost-all-dev build-essential libapr1-dev \
                       libaprutil1-dev libssl-dev openssl xz-utils && \
    \
    echo && echo "Installing clang and llvm support" && \    
    apt-get update && apt-get install -y clang-${LLVM_VERSION} lld-${LLVM_VERSION} && \
    cd /usr/bin && ln -s clang-${LLVM_VERSION} clang && \
                   ln -s clang++-${LLVM_VERSION} clang++ && \
                   ln -s lld-${LLVM_VERSION} lld && \
                   ln -s llvm-ar-${LLVM_VERSION} llvm-ar && \
                   ln -s llvm-ranlib-${LLVM_VERSION} llvm-ranlib && \
    \
    echo && echo "Installing googletest" && \   
    cd /usr/src/googletest/ && \
    mkdir build && cd build && \
    cmake -GNinja .. && \
    cmake --build . --target install -- -j8 && ldconfig && \   
    \
    echo && echo 'Installing node.js and npm' && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_${NODE_MAJOR}.x nodistro main" > /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && apt-get install -y nodejs && \
    npm install -g npm@${NPM_VERSION} && \
    npm install -g webpack && \    
    \
    echo && echo 'Clean up apt' && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/apt/archives/*deb && \
    rm -rf /tmp/*    

# Install Rust support
ENV RUSTUP_HOME="/.rustup"
ENV CARGO_HOME="/.cargo"
ENV PATH="/.cargo/bin:$PATH"
RUN echo && echo "Installing Rust support" && \
    curl --proto '=https' --tlsv1.3 -sSfL https://sh.rustup.rs | sh -s -- -y && \
    rustup target add wasm32-unknown-emscripten && \
    rustup target add wasm32-unknown-unknown && \
    rustup target add wasm32-wasip1 && \
    rustup target add wasm32-wasip1-threads && \
    rustup target add wasm32-wasip2 && \
    cargo install cargo-generate && \
    cargo install cargo-component && \
    cargo install wasm-tools && \
    cargo install wasm-pack && \
    cargo install wit-bindgen-cli && \
    rustup install stable && \
    cargo install cargo2junit && \
    chmod -R a+rw /.cargo /.rustup

# Install Wasmtime
ENV WASMTIME_HOME="/.wasmtime"
ENV PATH="$WASMTIME_HOME/bin:$PATH"
RUN echo && echo "Installing Wasmtime" && \
    curl --proto '=https' --tlsv1.3 -sSfL https://wasmtime.dev/install.sh | bash -s && \
    chmod -R a+rw /.wasmtime    

# Install StarlingMonkey Dependencies
ENV CPM_SOURCE_CACHE=/cpm_source_cache
ENV CPM_DOWNLOAD_ALL=true
RUN git clone https://github.com/bytecodealliance/StarlingMonkey --single-branch && \
    cd StarlingMonkey && \
    cmake -GNinja -S . -B cmake-build-debug -DENABLE_WPT:BOOL=ON -DCMAKE_BUILD_TYPE=Debug && \
    cmake -GNinja -S . -B cmake-build-release -DENABLE_WPT:BOOL=ON -DCMAKE_BUILD_TYPE=Release && \
    chmod -R a+rw /cpm_source_cache && rm -rf /StarlingMonkey

USER ubuntu

# Echo install versions and final ENVs, for the record
RUN echo && \
    echo 'Final install versions for the record' && \
    for pkg in git git-lfs vim vim-tiny net-tools iputils-ping dnsutils bash-completion nano tree curl \
               unzip apt-transport-https ca-certificates gnupg libtool autoconf automake pkg-config gcc \
               cmake ninja-build autogen libtool libgtest-dev libboost-all-dev build-essential libapr1-dev \
               libaprutil1-dev libssl-dev openssl xz-utils \
               wabt \
               clang-${LLVM_VERSION} lld-${LLVM_VERSION} \
               ; do \
    echo -n $pkg && apt-cache policy $pkg | grep Installed; done && \
    cargo -V && \
    echo "node $(node -v)" && \
    echo "npm $(npm -v)" && \
    wasmtime -V && \    
    echo && \
    echo 'Final ENVs for the record' && \
    export && \
    echo

COPY Containerfile /
COPY *.sh /
              
